name: CI
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - master
      - ci
  pull_request:
    branches:
      - master
  merge_group:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CLICOLOR_FORCE: 1

jobs:
  ensure-readme-up-to-date:
    name: Ensure readme is up-to-date
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.81.0
          profile: default
          override: true
      - uses: davidB/rust-cargo-make@v1
      - name: Make readme
        run: cargo make readme
      - name: Ensure no changes
        run: git diff --exit-code .

  nix-flake-test:
    name: Flake check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Cachix
        uses: cachix/cachix-action@v12
        with:
          name: ratatui-image-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Flake check
        run: |
          nix flake show
          nix flake check --print-build-logs

  nix-build:
    name: Nix build
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.upload-artifact.outputs.artifact_path }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Cachix
        uses: cachix/cachix-action@v12
        with:
          name: ratatui-image-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build package
        run: |
          nix build . --print-build-logs

  nix-build-windows:
    name: Nix build (windows)
    runs-on: ubuntu-latest
    outputs:
      artifact_path: ${{ steps.upload-artifact.outputs.artifact_path }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Cachix
        uses: cachix/cachix-action@v12
        with:
          name: ratatui-image-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Build package
        run: |
          nix build .#windows --print-build-logs

  setup-terminals:
    name: Setup terminals list
    runs-on: ubuntu-latest
    outputs:
      terminals: ${{ steps.set-terminals.outputs.terminals }}
    steps:
      - id: set-terminals
        run: |
          echo 'terminals=["xterm-vt340", "kitty", "ghostty", "foot", "wezterm", "mlterm", "rio", "contour", "xterm"]' >> $GITHUB_OUTPUT

  nix-flake-screenshots:
    name: Screenshot tests
    runs-on: ubuntu-latest
    needs: [nix-build, setup-terminals]
    permissions:
      contents: read
      pull-requests: write  # This is needed for PR comments
    strategy:
      matrix:
        terminal: ${{ fromJSON(needs.setup-terminals.outputs.terminals) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24

      - name: Cachix
        uses: cachix/cachix-action@v12
        with:
          name: ratatui-image-ci
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"

      - name: Run screenshot test for ${{ matrix.terminal }}
        run: |
          nix build .#packages.x86_64-linux.screenshot-test-${{ matrix.terminal }} --print-build-logs

      - name: Upload screenshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: screenshot-${{ matrix.terminal }}
          path: result/screenshot-${{ matrix.terminal }}.png

      - name: Upload to Imgur
        if: github.event_name == 'pull_request'
        id: imgur
        run: |
          echo "Uploading screenshot for ${{ matrix.terminal }}..."
          ls -la result/

          if [ ! -f "result/screenshot-${{ matrix.terminal }}.png" ]; then
            echo "Error: Screenshot file not found!"
            exit 1
          fi

          response=$(curl -s -X POST \
            -H "Authorization: Client-ID ${{ secrets.IMGUR_CLIENT_ID }}" \
            -F "image=@result/screenshot-${{ matrix.terminal }}.png" \
            https://api.imgur.com/3/image)

          echo "Imgur response: $response"

          # Check if upload was successful
          success=$(echo "$response" | grep -o '"success":[^,]*' | cut -d':' -f2)
          if [ "$success" != "true" ]; then
            echo "Error: Imgur upload failed"
            echo "$response"
            exit 1
          fi

          # Extract URL using jq-like parsing (more reliable)
          imgur_url=$(echo "$response" | sed -n 's/.*"link":"\([^"]*\)".*/\1/p')

          if [ -z "$imgur_url" ]; then
            echo "Error: Could not extract Imgur URL from response"
            echo "$response"
            exit 1
          fi

          echo "Successfully uploaded to: $imgur_url"
          echo "imgur_url=$imgur_url" >> $GITHUB_OUTPUT
          echo "terminal=${{ matrix.terminal }}" >> $GITHUB_OUTPUT

      - name: Save terminal and URL for comment
        if: github.event_name == 'pull_request'
        run: |
          mkdir -p screenshots
          echo "${{ steps.imgur.outputs.imgur_url }}" > screenshots/${{ matrix.terminal }}.txt
          echo "Saved URL for ${{ matrix.terminal }}: ${{ steps.imgur.outputs.imgur_url }}"

      - name: Upload screenshot info
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: screenshot-info-${{ matrix.terminal }}
          path: screenshots/${{ matrix.terminal }}.txt

  comment-screenshots:
    name: Comment with all screenshots
    runs-on: ubuntu-latest
    needs: [nix-flake-screenshots, setup-terminals]
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Download all screenshot info
        uses: actions/download-artifact@v4
        with:
          pattern: screenshot-info-*
          path: screenshot-info
          merge-multiple: true

      - name: Create combined comment
        id: create-comment
        run: |
          echo "Creating comment with screenshots..."
          ls -la screenshot-info/

          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "Merge of ${{ github.sha }} to \`master\`" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "Screenshots from all terminal emulators:" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT

          terminals='${{ needs.setup-terminals.outputs.terminals }}'
          # Convert JSON array to space-separated list
          terminal_list=$(echo "$terminals" | jq -r '.[]' | tr '\n' ' ')

          for terminal in $terminal_list; do
            echo "Processing terminal: $terminal"
            if [ -f "screenshot-info/${terminal}.txt" ]; then
              echo "Found info file for $terminal"
              cat "screenshot-info/${terminal}.txt"

              url=$(cat "screenshot-info/${terminal}.txt" | tr -d '\n\r')
              echo "Extracted URL: '$url'"

              if [ -n "$url" ] && [ "$url" != "" ]; then
                echo "### ${terminal}" >> $GITHUB_OUTPUT
                echo "![${terminal} screenshot](${url})" >> $GITHUB_OUTPUT
                echo "" >> $GITHUB_OUTPUT
              else
                echo "### ${terminal}" >> $GITHUB_OUTPUT
                echo "❌ Screenshot upload failed for ${terminal}" >> $GITHUB_OUTPUT
                echo "" >> $GITHUB_OUTPUT
              fi
            else
              echo "No info file found for $terminal"
              echo "### ${terminal}" >> $GITHUB_OUTPUT
              echo "❌ No screenshot available for ${terminal}" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
            fi
          done
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment PR with all screenshots
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: ${{ steps.create-comment.outputs.message }}
